// Mocks generated by Mockito 5.4.5 from annotations
// in guia_go/test/modules/go_now/presentation/pages/go_now_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:guia_go/modules/go_now/data/models/motel_list_data_model.dart'
    as _i4;
import 'package:guia_go/modules/go_now/data/models/motel_model.dart' as _i3;
import 'package:guia_go/modules/go_now/presentation/providers/go_now_provider.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GoNowProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoNowProvider extends _i1.Mock implements _i2.GoNowProvider {
  MockGoNowProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
    Invocation.setter(#isLoading, _isLoading),
    returnValueForMissingStub: null,
  );

  @override
  List<_i3.MotelModel> get motelList =>
      (super.noSuchMethod(
            Invocation.getter(#motelList),
            returnValue: <_i3.MotelModel>[],
          )
          as List<_i3.MotelModel>);

  @override
  List<_i3.MotelModel> get motelWithDiscountList =>
      (super.noSuchMethod(
            Invocation.getter(#motelWithDiscountList),
            returnValue: <_i3.MotelModel>[],
          )
          as List<_i3.MotelModel>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void initMethods() => super.noSuchMethod(
    Invocation.method(#initMethods, []),
    returnValueForMissingStub: null,
  );

  @override
  void setMotelListDataModel(_i4.MotelListDataModel? motelListDataModel) =>
      super.noSuchMethod(
        Invocation.method(#setMotelListDataModel, [motelListDataModel]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> getMotelList() =>
      (super.noSuchMethod(
            Invocation.method(#getMotelList, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
